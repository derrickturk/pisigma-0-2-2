-- Context:
--   Recursion with boxes
--   Thorsten Altenkirch
--   http://sneezy.cs.nott.ac.uk/fplunch/weblog/?p=104

Stream : Type;
Stream = Rec [∞ Stream];

ticks : Stream;
ticks = fold [ticks];

Eq : (A : Type) → A → A → Type;
Eq = λ A x y → (P : A → Type) → P x → P y;

refl : (A : Type) → (x : A) → Eq A x x;
refl = λ A x P px → px;

unfold' : Eq Stream ticks (fold [ticks]);
unfold' = refl Stream ticks;

-- We can prove this variant of congruence for boxes:

cong : (xs ys : Stream) → Eq Stream xs ys →
       Eq Stream (fold [let zs : Stream = xs in zs])
                 (fold [let zs : Stream = ys in zs]);
cong = λ xs ys eq P p →
         eq (λ zs → P (fold [let us : Stream = zs in us])) p;

-- This does not (obviously) break subject reduction, because the
-- following property can be proved using refl:

unfoldInContext :
  Eq Stream (fold [let xs : Stream =       ticks  in xs])
            (fold [let xs : Stream = fold [ticks] in xs]);
unfoldInContext = cong ticks (fold [ticks]) unfold';
unfoldInContext = refl Stream (fold [let xs : Stream = ticks in xs]);

-- Note also that unlimited unfolding is not possible (using refl):

-- unfoldTwiceInContext :
--   Eq Stream (fold [let xs : Stream =             ticks   in xs])
--             (fold [let xs : Stream = fold [fold [ticks]] in xs]);
-- unfoldTwiceInContext =
--   refl Stream (fold [let xs : Stream = ticks in xs]);

-- However, we can move lets through boxes, so the idea from
-- Thorsten's blog post needs to be qualified.

letThroughBox : (xs : Stream) →
                Eq Stream (fold [let ys : Stream = xs in  ys])
                          (let ys : Stream = xs in fold [ys]);
letThroughBox = λ xs → refl Stream (fold [let ys : Stream = xs in ys]);

letThrough2Boxes : (xs : Stream) →
                   Eq Stream (fold [fold [let ys : Stream = xs in  ys]])
                             (let ys : Stream = xs in fold [fold [ys]]);
letThrough2Boxes =
  λ xs → refl Stream (fold [fold [let ys : Stream = xs in ys]]);

anotherExample : (A : Type) → (x : A) →
                 Eq (∞ (∞ A)) [let y : A = x in [y]]
                              (let y : A = x in [[let z : A = y in z]]);
anotherExample = λ A x → refl (∞ (∞ A)) (let y : A = x in [[y]]);
