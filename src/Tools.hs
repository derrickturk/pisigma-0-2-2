module Tools where



import qualified System.IO.UTF8 as IO

import Data.List

-- To generate lists of symbols associations
genSymbols = 
     do
     s <- IO.readFile elipseSourceFilePath
     IO.writeFile (haskellTargetFileName ++ ".hs") (preambule ++ showaf (concatMap readAssoc (lines s)))
     return ()
     where -- Could use a proper parser instead ...
        skip ys xs | ys `isPrefixOf` xs = Just (drop (length ys) xs)
                   | otherwise          = Nothing
        (<|>) p q xs = case p xs of
                        Nothing -> q xs
                        r       -> r
        readAssoc s = case s' of Nothing -> []
                                 Just (ys,vs,rs) -> (ys,vs):readAssoc rs
                      where
                        brk = return . (break (=='\"'))
                        s' = do 
                             (ys,zs) <- brk =<< skip "(\"" (filter (/=' ') s) 
                             (vs,ws) <- brk =<< ((skip "\".(\"") <|> (skip "\".,(pisigma-input-to-string-list\"")) zs
                             rs <- skip "\"))" ws
                             return (ys,vs,rs)                             
                        
        
        safetail [] = []
        safetail (_:xs) = xs  

        showaf xs = "symbolsShortcuts = [" ++ concat (intersperse "\n                   ," (map showafp xs)) ++ "]"
        showafp (u,v) = "(\"" ++ u ++ "\",\"" ++ (filter (/=' ') v) ++ "\")" 

        preambule = unlines ["module " ++ haskellTargetFileName ++ " where"
                             , ""
                             , "-- This file was automatically generated by the function genSymbols in Tools.hs"
                             , "-- using the bindings found in :" ++ elipseSourceFilePath]
        haskellTargetFileName = "Symbols"
        elipseSourceFilePath  = "../emacs-mode/pisigma-input.el"